-- MySQL dump 10.13  Distrib 8.0.32, for Win64 (x86_64)
--
-- Host: myblogdb.ceehp3ooy3ma.ca-central-1.rds.amazonaws.com    Database: myblogdb
-- ------------------------------------------------------
-- Server version	8.0.33

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!50503 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;
SET @MYSQLDUMP_TEMP_LOG_BIN = @@SESSION.SQL_LOG_BIN;
SET @@SESSION.SQL_LOG_BIN= 0;

--
-- GTID state at the beginning of the backup 
--

SET @@GLOBAL.GTID_PURGED=/*!80000 '+'*/ '';

--
-- Table structure for table `tb_blog`
--

DROP TABLE IF EXISTS `tb_blog`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `tb_blog` (
  `blog_id` bigint NOT NULL AUTO_INCREMENT,
  `blog_owner` varchar(32) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `blog_title` varchar(200) DEFAULT NULL,
  `blog_sub_url` varchar(200) DEFAULT 'blog_id',
  `blog_cover_image` varchar(200) DEFAULT NULL,
  `blog_category_id` int DEFAULT NULL,
  `blog_category_name` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,
  `blog_tags` varchar(200) DEFAULT NULL,
  `blog_content` mediumtext,
  `blog_status` tinyint DEFAULT '0',
  `blog_views` bigint DEFAULT '0',
  `enable_comment` tinyint DEFAULT '0',
  `is_deleted` tinyint NOT NULL DEFAULT '0',
  `create_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `update_time` datetime DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`blog_id`),
  KEY `blog_owner` (`blog_owner`),
  KEY `tb_blog_ibfk_1` (`blog_category_id`),
  CONSTRAINT `tb_blog_ibfk_1` FOREIGN KEY (`blog_category_id`) REFERENCES `tb_blog_category` (`category_id`) ON DELETE CASCADE,
  CONSTRAINT `tb_blog_ibfk_2` FOREIGN KEY (`blog_owner`) REFERENCES `tb_admin` (`email`) ON DELETE CASCADE ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=99096972 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `tb_blog`
--

LOCK TABLES `tb_blog` WRITE;
/*!40000 ALTER TABLE `tb_blog` DISABLE KEYS */;
INSERT INTO `tb_blog` VALUES (8904667,'bli725@uwo.ca','How to use MUI framework in React.js','mui-in-reactjs','bli725@uwo.ca/blog-covers/10479230',97752640,'Frontend Development - React.js','React.js,Framework,UI design','# How to use MUI framework in React.js\r\nMUI is a popular open-source React UI framework that provides a set of pre-designed and customizable components based on Google\'s Material Design guidelines. These components can be used to build modern, visually appealing web applications with consistent design patterns.\r\n\r\nUsing the Material-UI (MUI) framework in a React.js project allows you to easily create modern and visually appealing user interfaces. Below, I\'ll provide you with a detailed guide on how to set up and use MUI in a React.js application.\r\n## Step1 Create a New React Application\r\nOpen your React Application. If you don\'t have one yet, you can create a new one with the following command:\r\n``` bash\r\nnpm install -g create-react-app # If this is your first time using React.js for development, please run this line\\.\r\nnpx create-react-app your-app-name\r\ncd your-app-name\r\n```\r\n## Step2  Install Material-UI\r\nAfter you are under your project directory,  install the Material-UI core package and its dependencies with the following command:\r\n```bash\r\nnpm install @mui/material @emotion/react @emotion/styled\r\n```\r\n## Step 3: Create Your First Component\r\nCreate a new component that will use Material-UI components. For example, let\'s create a simple button component.\r\n```jsx\r\n// src/components/MyButton.js\r\nimport React from \'react\';\r\nimport Button from \'@mui/material/Button\';\r\n\r\nconst MyButton = () => {\r\n  return (\r\n    <Button variant=\"contained\" color=\"primary\">\r\n      Click Me\r\n    </Button>\r\n  );\r\n};\r\n\r\nexport default MyButton;\r\n```\r\n## Step 4: Use the Component in App.js\r\nNow, import and use the MyButton component in App.js.\r\n```jsx\r\n// src/App.js\r\nimport React from \'react\';\r\nimport MyButton from \'./components/MyButton\';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <MyButton />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n```\r\n## Step 5: Run the Application\r\nStart your React application to see the Material-UI button in action.\r\n```bash\r\nnpm start\r\n```\r\n## Step 6: Customizing and Adding events\r\nNow you can customize the component as you want  and add events on it.\r\n## Conclusion:\r\nBy following these steps, you\'ve successfully set up and integrated the Material-UI framework into your React.js application. You can now start building your user interface using the wide range of components provided by Material-UI, and customize the theme to match your design preferences.\r\n\r\n**For more information, please visit MUI [doc](https://mui.com/)**',1,20,1,0,'2023-09-10 17:29:01','2023-09-18 15:53:11'),(10302105,'bli725@uwo.ca','How to use AWS S3 storage in your project.','s3-in-springboot','bli725@uwo.ca/blog-covers/10618266',32337781,'Backend Development - Spring Boot','Spring Boot,Amazon S3,Cloud Service','# How to use Amazon S3 in your project\r\nAmazon S3 (Simple Storage Service) is a highly scalable and secure cloud storage solution provided by Amazon Web Services (AWS). It allows users to store and retrieve data over the internet, making it ideal for a wide range of applications, from hosting websites to data backup and content distribution. This blog will show you how to set everything up for using S3 storage.\r\n## 1. Get access key and secret key\r\nIn AWS console, search IAM and click `Manage Access Keys` to create a new access key. Keep it safe and do not disclose it.\r\n## 2. Create a new bucket\r\nSearch S3 then and you can create a new bucket for storing your file. Remember the bucket name and bucket region.\r\n## 3. Add dependencies in pom.xml\r\n```xml\r\n<dependency>\r\n  <groupId>org.springframework.cloud</groupId>\r\n    <artifactId>spring-cloud-starter-aws</artifactId>\r\n    <version>2.2.6.RELEASE</version>\r\n</dependency>\r\n```\r\n## 4. Create your credentials and S3 client Object\r\nAdd bucket information to application.yml\r\n```properties\r\ncloud:\r\n  aws:\r\n    credentials:\r\n      access-key: Your Access Key Here\r\n      secret-key: Your Secret Key Here\r\n    region:\r\n      static: ca-central-1(replace with your region)\r\n    stack:\r\n      auto: false\r\n\r\napplication:\r\n  bucket:\r\n    name: Your Bucket Name Here\r\n```\r\nThen create your credentials and S3 client object\r\n```java\r\nimport com.amazonaws.auth.AWSCredentials;\r\nimport com.amazonaws.auth.AWSStaticCredentialsProvider;\r\nimport com.amazonaws.auth.BasicAWSCredentials;\r\nimport com.amazonaws.services.s3.AmazonS3;\r\nimport com.amazonaws.services.s3.AmazonS3ClientBuilder;\r\nimport org.springframework.beans.factory.annotation.Value;\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\n\r\n@Configuration\r\npublic class AmazonS3Config {\r\n\r\n    @Value(\"${cloud.aws.credentials.access-key}\")\r\n    private String accessKey;\r\n\r\n    @Value(\"${cloud.aws.credentials.secret-key}\")\r\n    private String accessSecret;\r\n\r\n    @Value(\"${cloud.aws.region.static}\")\r\n    private String region;\r\n\r\n    @Bean\r\n    public AmazonS3 s3Client(){\r\n        AWSCredentials credentials = new BasicAWSCredentials(accessKey, accessSecret);\r\n        return  AmazonS3ClientBuilder\r\n                .standard()\r\n                .withCredentials(new AWSStaticCredentialsProvider(credentials))\r\n                .withRegion(region)\r\n                .build();\r\n    }\r\n}\r\n```\r\n## 5. Upload and Download files from AWS S3\r\nNow you can upload and download files with s3Client now.\r\n\r\nFor upload:\r\n```java\r\ns3Client.putObject(new PutObjectRequest(bucketName, path, fileObj));\r\n```\r\nFor download:\r\n```java\r\ns3Object s3Object = s3Client.getObject(bucketName, path);\r\n```\r\nNote that all folders in your bucket should be included in path.\r\nFor example: `path=\"folder1/folder2/image.jpg\"`\r\n\r\nFor more information, please visit aws s3 [document](https://docs.aws.amazon.com/).',1,4,1,0,'2023-09-10 19:37:41','2023-09-10 23:03:06'),(10553931,'bli725@uwo.ca','How to use MyBatis in Spring Boot development','mybatis-in-springboot','bli725@uwo.ca/blog-covers/10595661',32337781,'Backend Development - Spring Boot','Framework,MyBatis','# MyBatis in Spring Boot\r\nMyBatis is a lightweight and flexible Java persistence framework that simplifies database interactions in Java applications. It provides a simple XML or annotation-based configuration to map Java objects to SQL statements, reducing boilerplate code. MyBatis offers dynamic SQL generation, custom query execution, and supports various databases. It emphasizes SQL control and offers powerful features like caching and lazy loading. MyBatis seamlessly integrates with Spring and other frameworks, making it a popular choice for data access in Java applications, particularly when developers seek a straightforward and efficient approach to database operations. In this blog, I will show you how to set everything up with MySql database.\r\n## 1. Add Dependencies\r\nOpen your pom.xml file and add the following dependencies:\r\n```xml\r\n<dependencies>\r\n    <!-- Spring Boot Starter Data JPA -->\r\n    <dependency>\r\n        <groupId>org.springframework.boot</groupId>\r\n        <artifactId>spring-boot-starter-data-jpa</artifactId>\r\n    </dependency>\r\n\r\n    <!-- MySQL Connector/J -->\r\n    <dependency>\r\n        <groupId>mysql</groupId>\r\n        <artifactId>mysql-connector-java</artifactId>\r\n    </dependency>\r\n\r\n    <!-- MyBatis and Spring Integration -->\r\n    <dependency>\r\n        <groupId>org.mybatis.spring.boot</groupId>\r\n        <artifactId>mybatis-spring-boot-starter</artifactId>\r\n        <version>2.2.0</version> <!-- Use the latest version -->\r\n    </dependency>\r\n</dependencies>\r\n```\r\n## 2. Configure application.yml\r\nAdd the MySQL and MyBatis configuration to your application.yml or application.properties:\r\n```properties\r\ndatasource:\r\n  name: my-blog-datasource\r\n  driverClassName: com.mysql.cj.jdbc.Driver\r\n  url: jdbc:mysql://localhost:port/databasename?useUnicode=true&characterEncoding=utf8&autoReconnect=true&useSSL=false&useAffectedRows=true\r\n  username: enter your user name\r\n  password: enter your password\r\nmybatis:\r\n  mapper-locations: classpath:mapper/*Mapper.xml\r\n```\r\n`mapper-locations` defines the location of all your mapper files.\r\n## 3. Create a MyBatis Mapper\r\nCreate a MyBatis mapper interface for your entity. This interface will specify the SQL queries.\r\n```java\r\npackage com.example.mapper;\r\n\r\nimport com.example.domain.User;\r\n\r\npublic interface UserMapper {\r\n    User findById(Long id);\r\n    void save(User user);\r\n}\r\n```\r\n## 4. Create the XML Mapper File\r\nCreate an XML file in the `resources` directory to define the SQL queries. For example, `UserMapper.xml`.\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\r\n<!DOCTYPE mapper\r\n        PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\r\n        \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\r\n\r\n<mapper namespace=\"com.example.mapper.UserMapper\">\r\n    <resultMap id=\"BaseResultMap\" type=\"com.example.domain.User\">\r\n        <id column=\"id\" property=\"id\" jdbcType=\"BIGINT\"/>\r\n        <result column=\"username\" property=\"username\" jdbcType=\"VARCHAR\"/>\r\n        <result column=\"email\" property=\"email\" jdbcType=\"VARCHAR\"/>\r\n        <!-- Add other fields here -->\r\n    </resultMap>\r\n\r\n    <select id=\"findById\" resultMap=\"BaseResultMap\">\r\n        SELECT * FROM users WHERE id = #{id}\r\n    </select>\r\n\r\n    <insert id=\"save\" parameterType=\"com.example.domain.User\">\r\n        INSERT INTO users (username, email) VALUES (#{username}, #{email})\r\n    </insert>\r\n</mapper>\r\n```\r\n## 5. Create the Entity\r\nCreate a Java class representing your entity (in this case, `User`).\r\n```java\r\npackage com.example.domain;\r\n\r\npublic class User {\r\n    private Long id;\r\n    private String username;\r\n    private String email;\r\n    \r\n    // Getters and setters\r\n}\r\n```\r\n## 6. Create a Service\r\nCreate a service that uses the MyBatis mapper.\r\n```java\r\npackage com.example.service;\r\n\r\nimport com.example.domain.User;\r\nimport com.example.mapper.UserMapper;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.stereotype.Service;\r\n\r\n@Service\r\npublic class UserService {\r\n    @Autowired\r\n    private UserMapper userMapper;\r\n\r\n    public User getUserById(Long id) {\r\n        return userMapper.findById(id);\r\n    }\r\n\r\n    public void saveUser(User user) {\r\n        userMapper.save(user);\r\n    }\r\n}\r\n```\r\n## 7. Usage\r\n\r\nUse the service in your controller or wherever it\'s needed.\r\n```java\r\n@RestController\r\npublic class UserController {\r\n    @Autowired\r\n    private UserService userService;\r\n\r\n    @GetMapping(\"/users/{id}\")\r\n    public User getUser(@PathVariable Long id) {\r\n        return userService.getUserById(id);\r\n    }\r\n\r\n    @PostMapping(\"/users\")\r\n    public void saveUser(@RequestBody User user) {\r\n        userService.saveUser(user);\r\n    }\r\n}\r\n```\r\nThat\'s it! You\'ve set up a Spring Boot application with MyBatis and MySQL integration. Remember to replace com.example with your actual package name and adjust the database connection details accordingly.',1,25,1,0,'2023-09-10 18:17:31','2023-09-10 23:03:42'),(13018210,'bli725@uwo.ca','useEffect in React.js','use-effect-reactjs','bli725@uwo.ca/blog-covers/13676916',97752640,'Frontend Development - React.js','React.js,useEffect','# useEffect in React.js\r\nBeginners and experienced developers alike find it to be one of the trickiest hooks to understand, because it requires understanding a few unfamiliar programming concepts.\r\n\r\nIn this quick guide, we\'re going to cover why this hook exists, how to better understand it, and how to properly use it in your React projects today.\r\n## Why is it called useEffect?\r\nWhat exactly is an \"effect\"?\r\n\r\nThe word effect refers to a functional programming term called a \"side effect\". But to really understand what a side effect is, we first have to grasp the concept of a pure function. You may not know this, most React components are intended to be pure functions. It may be strange to think about React components as functions, but they are. It helps to see that a regular React function component is declared like a JavaScript function:\r\n```jsx\r\nfunction MyReactComponent() {}\r\n```\r\nMost React components are pure functions, meaning they receive an input and produce a predictable output of JSX. The input to a JavaScript function is arguments. What is the input to a React component, however? Props! Here we have a `User` component that has the prop `name` declared on it. Within `User`, the prop value is displayed in a header element.\r\n```jsx\r\nexport default function App() {\r\n  return <User name=\"John Doe\" />   \r\n}\r\n  \r\nfunction User(props) {\r\n  return <h1>{props.name}</h1>; // John Doe\r\n}\r\n```\r\nThis is pure because, given the same input, it will always return the same output. If we pass `User` a `name` prop with value \"John Doe\", our output will always be John Doe. You might be saying, \"Who cares? Why do we even have a name for this?\" Pure functions have the great benefit of being predictable, reliable, and easy to test. This is as compared to when we need to perform a side effect in our component.\r\n## What are side effects in React?\r\nSide effects are not predictable because they are actions which are performed with the \"outside world.\" We perform a side effect when we need to reach outside of our React components to do something. Performing a side effect, however, will not give us a predictable result.\r\n Think about if we were to request data (like blog posts) from a server that has failed and instead of our post data, gives us a 500 status code response. Virtually all applications rely on side effects to work in one way or another, aside from the simplest applications.\r\n\r\nCommon side effects include:\r\n- Making a request to an API for data from a backend server\r\n- To interact with browser APIs (that is, to use document or window directly)\r\n- Using unpredictable timing functions like setTimeout or setInterval\r\n\r\nThis is why useEffect exists: to provide a way to handle performing these side effects in what are otherwise pure React components.\r\n\r\nFor example, if we wanted to change the title meta tag to display the user\'s name in their browser tab, we could do it within the component itself, but we shouldn\'t.\r\n```jsx\r\nfunction User({ name }) {\r\n  document.title = name; \r\n  // This is a side effect. Don\'t do this in the component body!\r\n    \r\n  return <h1>{name}</h1>;   \r\n}\r\n```\r\nIf we perform a side effect directly in our component body, it gets in the way of our React component\'s rendering.\r\n\r\nSide effects should be separated from the rendering process. If we need to perform a side effect, it should strictly be done after our component renders.\r\n\r\nThis is what useEffect gives us.\r\n\r\nIn short, **useEffect is a tool that lets us interact with the outside world but not affect the rendering or performance of the component that it\'s in**.\r\n## How do I use useEffect?\r\nThe basic syntax of useEffect is as follows:\r\n```jsx\r\n// 1. import useEffect\r\nimport { useEffect } from \'react\';\r\n\r\nfunction MyComponent() {\r\n  // 2. call it above the returned JSX  \r\n  // 3. pass two arguments to it: a function and an array\r\n  useEffect(() => {}, []);\r\n  \r\n  // return ...\r\n}\r\n```\r\nThe correct way to perform the side effect in our User component is as follows:\r\n1. We import useEffect from \"react\"\r\n2. We call it above the returned JSX in our component\r\n3. We pass it two arguments: a function and an array\r\n```jsx\r\nimport { useEffect } from \'react\';\r\n\r\nfunction User({ name }) {\r\n  useEffect(() => {\r\n    document.title = name;\r\n  }, [name]);\r\n    \r\n  return <h1>{name}</h1>;   \r\n}\r\n```\r\nThe function passed to useEffect is a callback function. This will be called after the component renders. In this function, we can perform our side effects or multiple side effects if we want. The second argument is an array, called the dependencies array. This array should include all of the values that our side effect relies upon. In our example above, since we are changing the title based off of a value in the outer scope, name, we need to include that within the dependencies array. What this array will do is it will check and see if a value (in this case name) has changed between renders. If so, it will execute our use effect function again. This makes sense because if the name changes, we want to display that changed name and therefore run our side effect again.\r\n## How to fix common mistakes with useEffect\r\nThere are some subtle details to be aware of avoid mistakes with useEffect. If you do not provide the dependencies array at all and only provide a function to useEffect, it will run after every render. This can lead to problems when you\'re attempting to update state within your useEffect hook. If you forget to provide your dependencies correctly and you are setting a piece of local state when the state is updated, the default behavior of React is to re-render the component. And therefore, since useEffect runs after every single render without the dependencies array, we will have an infinite loop.\r\n```jsx\r\nfunction MyComponent() {\r\n  const [data, setData] = useState([])  \r\n    \r\n  useEffect(() => {\r\n    fetchData().then(myData => setData(myData))\r\n    // Error! useEffect runs after every render without the dependencies array, causing infinite loop\r\n  }); \r\n}\r\n```\r\nAfter the first render, useEffect will be run, state will be updated, which will cause a re-render, which will cause useEffect to run again, starting the process over again ad infinitum. This is called an infinite loop and this effectively breaks our application. If you are updating state within your useEffect, make sure to provide an empty dependencies array. If you do provide an empty array, which I recommend you do by default for any time that you use useEffect, this will cause the effect function to only run once after the component has rendered the first time. A common example for this is to fetch data. For a component, you may just want to fetch data once, put it in state, and then display it in your JSX.\r\n```jsx\r\nfunction MyComponent() {\r\n  const [data, setData] = useState([])  \r\n    \r\n  useEffect(() => {\r\n    fetchData().then(myData => setData(myData))\r\n    // Correct! Runs once after render with empty array\r\n  }, []); \r\n   \r\n  return <ul>{data.map(item => <li key={item}>{item}</li>)}</ul>\r\n}\r\n```\r\n## What is the cleanup function in useEffect?\r\nThe final part of performing side effects properly in React is the effect cleanup function. Sometimes our side effects need to be shut off. For example, if you have a countdown timer using the ``setInterval`` function, that interval will not stop unless we use the ``clearInterval`` function. Another example is to use subscriptions with WebSockets. Subscriptions need to be \"turned off\" when we are no longer using them, and this is what the cleanup function is for. If we are setting state using ``setInterval`` and that side effect is not cleaned up, when our component unmounts and we\'re no longer using it, the state is destroyed with the component – but the ``setInterval`` function will keep running.\r\n```jsx\r\nfunction Timer() {\r\n  const [time, setTime] = useState(0);\r\n    \r\n  useEffect(() => {\r\n    setInterval(() => setTime(1), 1000); \r\n    // counts up 1 every second\r\n    // we need to stop using setInterval when component unmounts\r\n  }, []);\r\n}\r\n```\r\nThe problem with this if the component is destroying, is that ``setInterval`` will try to update a variable a piece of state ``time`` that no longer exists. This is an error called a memory leak. To use the cleanup function, we need to return a function from within the useEffect function. Within this function we can perform our cleanup, in this case to use ``clearInterval`` and stop ``setInterval``.\r\n```jsx\r\nfunction Timer() {\r\n  const [time, setTime] = useState(0);\r\n    \r\n  useEffect(() => {\r\n    let interval = setInterval(() => setTime(1), 1000); \r\n\r\n    return () => {\r\n      // setInterval cleared when component unmounts\r\n      clearInterval(interval);\r\n    }\r\n  }, []);\r\n}\r\n```\r\nThe cleanup function will be called when the component is unmounted. A common example of a component being unmounted is going to a new page or a new route in our application where the component is no longer rendered. When a component is unmounted, our cleanup function runs, our interval is cleared, and we no longer get an error of attempting to update a state variable that doesn\'t exist. Finally, the side effect cleanup is not required in every case. It is only required in a few cases, such as when you need to stop a repeated side effect when your component unmounts.\r\n\r\nOriginal blog: [The React useEffect Hook for Absolute Beginners](https://www.freecodecamp.org/news/react-useeffect-absolute-beginners/)',1,291,1,0,'2023-09-11 11:46:21','2023-09-18 09:20:11'),(16098293,'bli725@uwo.ca','Return value from MySql with JDBC','return-value-of-jdbc','bli725@uwo.ca/blog-covers/16179662',32337781,'Backend Development - Spring Boot','Java,JDBC,MySql','# The return value from mysql with jdbc\r\n```java\r\npublic static void main(String[] args) throws InterruptedException, IOException {\r\n    try {\r\n\r\n        DriverManagerDataSource dataSource = new DriverManagerDataSource();\r\n        dataSource.setDriverClassName(\"com.mysql.jdbc.Driver\");\r\n        dataSource.setUrl(your_jdbc_url_here);\r\n        dataSource.setUsername(your_user_name);\r\n        dataSource.setPassword(your_password);\r\n\r\n        JdbcTemplate jdbcTemplate = new JdbcTemplate(dataSource);\r\n\r\n        int res= jdbcTemplate.update(\"update student set name=\'jack\',age=12 where id=25\");\r\n        System.out.println(res);\r\n\r\n    } catch (Exception e) {\r\n        // TODO Auto-generated catch block\r\n        e.printStackTrace();\r\n    }  \r\n    \r\n}\r\n```\r\n\r\nWe know that in MySql if we modify a piece of data and the original and modified values are the same, it will return an affected row count of 0. However, after multiple executions and tests, it consistently returns 1. This was puzzling. Upon further research, I discovered that JDBC defaults to returning the matched row count, not the affected row count. To obtain the affected row count, you can add \'useAffectedRows=true\' to the URL connection address.\r\n```java\r\nURL: jdbc:mysql://172.23.88.107:3306/test?useUnicode=true&characterEncoding=UTF-8&serverTimezone=UTC&useAffectedRows=true\r\n```\r\nP.S.: In fact, SQL Server and Oracle do not differentiate between matched and affected row counts; they both return affected row counts, which align with MySQL\'s matched row count value. Therefore, to ensure consistency across these three databases, it is generally not recommended to use \'useAffectedRows=true\'.',1,63,1,0,'2023-09-10 21:55:01','2023-09-10 23:04:04'),(22853758,'bli725@uwo.ca','How to set debug configuration for MyBatis and Spring Boot','debug-mybatis-springboot','bli725@uwo.ca/blog-covers/22901014',32337781,'Backend Development - Spring Boot','Spring Boot,MyBatis,Console','# Set debug environment for mybatis\r\nlogging SQL queries is crucial for several reasons. It aids in debugging, allowing developers to inspect the exact queries sent to the database. This can uncover issues such as incorrect parameter values or malformed queries. It also assists in performance optimization, as it provides insights into the efficiency of generated SQL. Moreover, it enhances transparency and accountability in the development process, enabling team members to review and analyze database interactions. This logging practice is an indispensable tool for maintaining and troubleshooting database operations in a Spring Boot application. \r\n## Add Configuration in application.yml\r\n```properties\r\nspring:\r\n  jpa:\r\n    show-sql: true\r\nmybatis:\r\n  mapper-locations: configure_your_mapper_location_here\r\n  configuration:\r\n    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl\r\n\r\n```\r\n## \r\nThen you can view the specific execution details of the SQL queries!',1,279,1,0,'2023-09-10 18:28:42','2023-09-16 21:43:35'),(28320450,'bli725@uwo.ca','How to set Markdown editor in React.js application','markdown-in-reactjs','bli725@uwo.ca/blog-covers/28320937',97752640,'Frontend Development - React.js','React.js,Markdown,text editor','Author: [jaywcjlove](https://github.com/uiwjs/react-markdown-editor)\r\n\r\n\r\n## Install\r\n\r\n```bash\r\nnpm i @uiw/react-markdown-editor\r\n```\r\n\r\n## Basic Usage\r\n\r\n```jsx mdx:preview\r\nimport React from \'react\';\r\nimport MarkdownEditor from \'@uiw/react-markdown-editor\';\r\n\r\nconst mdStr = `# This is a H1  \\n## This is a H2  \\n###### This is a H6`;\r\n\r\nconst Dome = () => {\r\n  return (\r\n    <MarkdownEditor\r\n      value={mdStr}\r\n      onChange={(value, viewUpdate) => {\r\n\r\n      }}\r\n    />\r\n  )\r\n};\r\n\r\nexport default Dome;\r\n```\r\n\r\n## Custom Toolbars\r\n\r\n[![Open in CodeSandbox](https://img.shields.io/badge/Open%20in-CodeSandbox-blue?logo=codesandbox)](https://codesandbox.io/embed/react-markdown-editorcustom-toolbars-forked-r9ocu?fontsize=14&hidenavigation=1&theme=dark)\r\n\r\n```jsx mdx:preview\r\nimport React from \"react\";\r\nimport MarkdownEditor from \'@uiw/react-markdown-editor\';\r\n\r\nconst title2 = {\r\n  name: \'title2\',\r\n  keyCommand: \'title2\',\r\n  button: { \'aria-label\': \'Add title text\' },\r\n  icon: (\r\n    <svg width=\"12\" height=\"12\" viewBox=\"0 0 512 512\">\r\n      <path fill=\"currentColor\" d=\"M496 80V48c0-8.837-7.163-16-16-16H320c-8.837 0-16 7.163-16 16v32c0 8.837 7.163 16 16 16h37.621v128H154.379V96H192c8.837 0 16-7.163 16-16V48c0-8.837-7.163-16-16-16H32c-8.837 0-16 7.163-16 16v32c0 8.837 7.163 16 16 16h37.275v320H32c-8.837 0-16 7.163-16 16v32c0 8.837 7.163 16 16 16h160c8.837 0 16-7.163 16-16v-32c0-8.837-7.163-16-16-16h-37.621V288H357.62v128H320c-8.837 0-16 7.163-16 16v32c0 8.837 7.163 16 16 16h160c8.837 0 16-7.163 16-16v-32c0-8.837-7.163-16-16-16h-37.275V96H480c8.837 0 16-7.163 16-16z\" />\r\n    </svg>\r\n  ),\r\n  execute: ({ state, view }) => {\r\n    if (!state || !view) return;\r\n    const lineInfo = view.state.doc.lineAt(view.state.selection.main.from);\r\n    let mark = \'#\';\r\n    const matchMark = lineInfo.text.match(/^#+/)\r\n    if (matchMark && matchMark[0]) {\r\n      const txt = matchMark[0];\r\n      if (txt.length < 6) {\r\n        mark = txt + \'#\';\r\n      }\r\n    }\r\n    if (mark.length > 6) {\r\n      mark = \'#\';\r\n    }\r\n    const title = lineInfo.text.replace(/^#+/, \'\')\r\n    view.dispatch({\r\n      changes: {\r\n        from: lineInfo.from,\r\n        to: lineInfo.to,\r\n        insert: `${mark} ${title}`\r\n      },\r\n      // selection: EditorSelection.range(lineInfo.from + mark.length, lineInfo.to),\r\n      selection: { anchor: lineInfo.from + mark.length },\r\n    });\r\n  },\r\n};\r\n\r\nconst Dome = () => (\r\n  <MarkdownEditor\r\n    value=\"Hello Markdown!\"\r\n    height=\"200px\"\r\n    toolbars={[\r\n      \'bold\', title2\r\n    ]}\r\n  />\r\n);\r\n\r\nexport default Dome;\r\n```\r\n\r\n## Support dark-mode/night-mode\r\n\r\nBy default, the [`dark-mode`](https://github.com/jaywcjlove/dark-mode/) is automatically switched according to the system. If you need to switch manually, just set the `data-color-mode=\"dark\"` parameter for html Element. \r\n\r\n```html\r\n<html data-color-mode=\"dark\">\r\n```\r\n\r\n```js\r\ndocument.documentElement.setAttribute(\'data-color-mode\', \'dark\')\r\ndocument.documentElement.setAttribute(\'data-color-mode\', \'light\')\r\n```\r\n\r\nInherit custom color variables by adding `.wmde-markdown-var` selector.\r\n\r\n```jsx\r\nconst Demo = () => {\r\n  return (\r\n    <div>\r\n      <div className=\"wmde-markdown-var\"> </div>\r\n      <MarkdownEditor value=\"Hello Markdown!\" />\r\n    </div>\r\n  )\r\n}\r\n```\r\n\r\n## License\r\n\r\nLicensed under the MIT License.',1,281,1,0,'2023-09-09 16:48:23','2023-09-18 09:13:57'),(41373132,'bli725@uwo.ca','useMemo in React.js','use-memo-reactjs','bli725@uwo.ca/blog-covers/41435828',97752640,'Frontend Development - React.js','React.js,useMemo','# useMemo in React.js\r\n## Introduction\r\nWith the release of React 16.8, there are many useful hooks you can now use in your React applications. One of the built-in Hooks that was introduced in 16.8 is ``useMemo``. This hook has the potential to improve performance in your application.\r\n\r\nThis article will explore how re-rendering works in React, why that is an important consideration for React applications, and how the ``useMemo`` hook can leverage it to create a performance boost in your applications. You will also learn when ``useMemo`` can cause performance issues.\r\n## Prerequisites\r\nTo complete this tutorial, you will need:\r\n\r\n- A basic understanding of React before starting this tutorial. You can learn more about React by following the How to Code in React.js series.\r\n## Referential Equality and Expensive Operations\r\nThere are two problems that ``useMemo`` seeks to address:\r\n\r\n- referential equality\r\n- computationally expensive operations\r\n\r\nIn the lifecycle of a component, React re-renders the component when an update is made. When React checks for any changes in a component, it may detect an unintended or unexpected change due to how JavaScript handles equality and shallow comparisons. This change in the React application will cause it to re-render unnecessarily.\r\n\r\nAdditionally, if that re-rendering is an expensive operation, like a long for ``loop``, it can hurt performance. Expensive operations can be costly in either time, memory, or processing. In addition to potential technical issues, this may lead to poor user experience.\r\n\r\nIf one part re-renders, it re-renders the entire component tree.\r\n\r\nThus, React released the ``memo`` idea to fix this.\r\n## Understanding Memoization\r\nMemoization is an optimization technique that passes a complex function to be memoized. In memoization, the result is “remembered” when the same parameters are passed-in subsequently.\r\n\r\nIf we have a function compute ``1 + 1``, it will return ``2``. But if it uses memoization, the next time we run ``1``’s through the function, it won’t add them up; it will just remember the answer is ``2`` without executing the adding function.\r\n\r\nFrom the official React documentation, ``useMemo``’s signature looks like this:\r\n```jsx\r\nconst memoizedValue = React.useMemo(() => computeExpensiveValue(a, b), [a, b]);\r\n```\r\n``useMemo`` takes in a function and an array of dependencies.\r\n\r\nThe dependencies act similarly to arguments in a function. The dependency list is the elements ``useMemo`` watches: if there are no changes, the function result will stay the same. Otherwise, it will re-run the function. If they don’t change, it doesn’t matter if our entire component re-renders, the function won’t re-run but instead returns the stored result. This can be optimal if the wrapped function is large and expensive. That is the primary use for ``useMemo``.\r\n## Creating a useMemo Example\r\nHere is an abstract example of using ``useMemo`` for an array of items that uses two computationally expensive functions:\r\n```jsx\r\nconst List = React.useMemo(() => \r\n  listOfItems.map(item => ({\r\n    ...item,\r\n    itemProp1: expensiveFunction(props.first),\r\n    itemProp2: anotherPriceyFunction(props.second) \r\n  })), [listOfItems]\r\n)\r\n```\r\nIn the above example, the ``useMemo`` function would run on the first render. It would block the thread until the expensive functions complete, as ``useMemo`` runs in the first render.\r\n\r\nInitially, this will not look as clean as ``useEffect``, since ``useEffect`` can render a loading spinner until the expensive functions finish and the effects fire off.\r\n\r\nHowever, in subsequent renders, the expensive functions would not need to run again as long as ``listOfItems`` never changed. ``useMemo`` would “remember” the return value of each function.\r\n\r\nIt would make these expensive functions appear to render instantaneous. This is ideal if you have an expensive, synchronous function or two.\r\n## When to Use useMemo\r\nWrite the code first and then revisit it to see if you can optimize it. If you implement ``useMemo`` too often in an application, it can harm the performance.\r\n\r\nWhen looking to implement ``useMemo``, you can check with profiling tools to identify expensive performance issues. Expensive means it is using up a lot of resources (like memory). If you are defining a good number of variables in a function at render, it makes sense to memoize with ``useMemo``.\r\n\r\noriginal blog: [Understanding the React useMemo Hook](https://www.digitalocean.com/community/tutorials/react-usememo)',1,278,1,0,'2023-09-11 12:02:14','2023-09-18 09:12:12'),(75452900,'bli725@uwo.ca','How can a unique ID be generated for data about to be inserted into a database?','generate-unique-id','bli725@uwo.ca/blog-covers/75518673',32337781,'Backend Development - Spring Boot','Spring Boot,MySql,MyBatis','# Generate a unique ID for new date\r\nIn databases where the \'id\' field serves as the primary key, it\'s essential to create a truly unique identifier. This blog post will explore various methods for generating random IDs.\r\n## 1. Using \'UUID\' (Universally Unique Identifier)\r\n```java\r\nimport java.util.UUID;\r\n\r\npublic class UniqueIdGenerator {\r\n\r\n    public static String generateUniqueId() {\r\n        return UUID.randomUUID().toString();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        String uniqueId = generateUniqueId();\r\n        System.out.println(\"Generated Unique ID: \" + uniqueId);\r\n    }\r\n}\r\n```\r\n## 2. Using \'AtomicInteger\'\r\n```java\r\nimport java.util.concurrent.atomic.AtomicInteger;\r\n\r\npublic class UniqueIdGenerator {\r\n\r\n    private static final AtomicInteger counter = new AtomicInteger(0);\r\n\r\n    public static int generateUniqueId() {\r\n        return counter.incrementAndGet();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        int uniqueId = generateUniqueId();\r\n        System.out.println(\"Generated Unique ID: \" + uniqueId);\r\n    }\r\n}\r\n```\r\n## 3. Using \'System.currentTimeMillis()\'\r\n```java\r\npublic class UniqueIdGenerator {\r\n\r\n    public static long generateUniqueId() {\r\n        return System.currentTimeMillis();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        long uniqueId = generateUniqueId();\r\n        System.out.println(\"Generated Unique ID: \" + uniqueId);\r\n    }\r\n}\r\n```\r\n## 4. Using \'SecureRandom\'\r\n```java\r\nimport java.security.SecureRandom;\r\nimport java.util.Base64;\r\n\r\npublic class UniqueIdGenerator {\r\n\r\n    private static final SecureRandom random = new SecureRandom();\r\n\r\n    public static String generateUniqueId() {\r\n        byte[] bytes = new byte[16];\r\n        random.nextBytes(bytes);\r\n        return Base64.getUrlEncoder().withoutPadding().encodeToString(bytes);\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        String uniqueId = generateUniqueId();\r\n        System.out.println(\"Generated Unique ID: \" + uniqueId);\r\n    }\r\n}\r\n```\r\n## 5. Using Database-Generated IDs\r\nThis involves using database-specific features like auto-increment columns (MySQL, PostgreSQL) or sequences (Oracle, PostgreSQL) to generate unique IDs. The exact implementation will depend on the database you are using.\r\nAnd here, I will take MySql database as an example and show you how to implement this in MyBatis.\r\n```sql\r\n<insert id=\"batchInsertBlogTag\" parameterType=\"java.util.List\" useGeneratedKeys=\"true\" keyProperty=\"tagId\">\r\n    insert into tb_blog_tag(tag_id, tag_name, is_deleted, create_time, tag_owner)\r\n        values\r\n        <foreach collection=\"list\" item=\"item\" separator=\",\">\r\n            (#{item.tagId,jdbcType=NUMERIC}, #{item.tagName,jdbcType=VARCHAR}, #{item.isDeleted,jdbcType=TINYINT}, #{item.createTime,jdbcType=TIMESTAMP}, #{item.tagOwner,jdbcType=VARCHAR})\r\n        </foreach>\r\n</insert> \r\n```\r\nIn this MyBatis XML configuration snippet, these two lines dictate how the automatically generated primary key (Generated Keys) is handled during insertion.\r\n\r\nuseGeneratedKeys=\"true\":\r\nThis is a configuration attribute that instructs MyBatis whether to retrieve the automatically generated primary key after an insertion. When set to true, MyBatis attempts to obtain the generated primary key value from the database. This is typically used in scenarios where you need to acquire the primary key of the newly inserted row.\r\n\r\nkeyProperty=\"tagId\":\r\nThis specifies the property in the Java object that will receive the automatically generated primary key value. In this example, it tells MyBatis to set the generated primary key value into the tagId property of the Java object.\r\n\r\nIn summary, these two lines inform MyBatis to fetch the database-generated primary key after an insertion and store it in the designated property of the Java object. This is particularly useful when you need to know the primary key value of the newly inserted row.\r\n## Conclusion\r\nRemember to choose the method that best suits your specific requirements and constraints. Each approach has its own advantages and considerations in terms of uniqueness, performance, and complexity.',1,327,1,0,'2023-09-10 17:55:57','2023-09-18 16:23:29'),(99096971,'bli725@uwo.ca','Axios in React.js','axios-reactjs','bli725@uwo.ca/blog-covers/99156995',97752640,'Frontend Development - React.js','React.js,axios','# Axios in React.js\r\n Axios, which is a popular library is mainly used to send **asynchronous** HTTP requests to REST endpoints. This library is very useful to perform CRUD operations.\r\n\r\nThis popular library is used to communicate with the backend. Axios supports the Promise API, native to JS ES6.\r\nUsing Axios we make API requests in our application. Once the request is made we get the data in Return, and then we use this data in our project. \r\n\r\nThis blog will show you how to use axios to send asynchronous HTTP requests.\r\n## Install the library to your project\r\n```bash\r\nnpm install axios\r\n```\r\nAfter Axios installation, you can import this library into your file and use it to make an HTTP request. \r\n## Send asynchronous HTTP requests\r\nBelow is the code snippet of a file where the library is imported at the top.\r\n```javascript\r\nimport React from \"react\";\r\nimport axios from \"axios\";\r\n \r\nclass App extends React.Component {\r\n    state = {\r\n        newfiles: null,\r\n    };\r\n \r\n    handleFile(e) {\r\n \r\n        // Getting the files from the input\r\n        let newfiles = e.target.newfiles;\r\n        this.setState({ newfiles });\r\n    }\r\n \r\n    handleUpload(e) {\r\n        let newfiles = this.state.newfiles;\r\n \r\n        let formData = new FormData();\r\n \r\n        // Adding files to the formdata\r\n        formData.append(\"image\", newfiles);\r\n        formData.append(\"name\", \"Name\");\r\n \r\n        axios({\r\n \r\n            // Endpoint to send files\r\n            url: \"http://localhost:8080/files\",\r\n            method: \"POST\",\r\n            headers: {\r\n \r\n                // Add any auth token here\r\n                authorization: \"your token comes here\",\r\n            },\r\n \r\n            // Attaching the form data\r\n            data: formData,\r\n        })\r\n \r\n            // Handle the response from backend here\r\n            .then((res) => { })\r\n \r\n            // Catch errors if any\r\n            .catch((err) => { });\r\n    }\r\n \r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>Select your files</h1>\r\n                <input\r\n                    type=\"file\"\r\n \r\n                    // To select multiple files\r\n                    multiple=\"multiple\"\r\n                    onChange={(e) => this.handleFile(e)}\r\n                />\r\n                <button onClick={(e) => this.handleUpload(e)}>\r\n                    Send Files\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n \r\nexport default App;\r\n```\r\n## Response Objects in Axios\r\nWhen you send a request to the server, you receive a response object from the server with the properties given below…\r\n\r\n- data: You receive data from the server in payload form. This data is returned in JSON form and parse back into a JavaScript object to you.\r\n\r\n- status: You get the HTTP code returned from the server.\r\n\r\n- statusText: HTTP status message returned by the server.\r\n- headers: All the headers are sent back by the server.\r\n- config: original request configuration.\r\n- request: actual XMLHttpRequest object.\r\n## Error Object\r\nYou will get an error object if there is a problem with the request. Promise will be rejected with an error object with the properties given.\r\n\r\n- message: Error message text. \r\n- response: Response object (if received). \r\n- request: Actual XMLHttpRequest object (when running in a browser). \r\n- config: Original request configuration. \r\n## Shorthand Methods in Axios\r\nBelow are some shorthand methods of Axios…\r\n- axios.request(config)\r\n- axios.head(url[, config])\r\n- axios.get(url[, config])\r\n- axios.post(url[, data[, config]])\r\n- axios.put(url[, data[, config]])\r\n- axios.delete(url[, config])\r\n- axios.options(url[, config])\r\n- axios.patch(url[, data[, config]])\r\n## Conclusion\r\nAs we have discussed that Axios allows you to communicate with the APIs in your React project. The same tasks can also be performed by using AJAX, but Axios provide you more functionality and features and that helps you in building your application quickly. \r\n\r\nAxios is a promise-based library, so you need to implement some promise-based asynchronous HTTP requests. jQuery and AJAX also perform the same job but in React project React handles each and everything in its own virtual DOM, so there is no need to use jQuery at all.',1,25,1,0,'2023-09-10 22:20:10','2023-09-10 22:20:10');
/*!40000 ALTER TABLE `tb_blog` ENABLE KEYS */;
UNLOCK TABLES;
SET @@SESSION.SQL_LOG_BIN = @MYSQLDUMP_TEMP_LOG_BIN;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2023-10-13 21:04:56
