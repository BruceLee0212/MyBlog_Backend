<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.site.blog.my.core.dao.BlogCommentMapper">
    <resultMap id="BaseResultMap" type="com.site.blog.my.core.entity.BlogComment">
        <id column="comment_id" jdbcType="BIGINT" property="commentId"/>
        <result column="comment_owner" jdbcType="VARCHAR" property="commentOwner"/>
        <result column="comment_blog_id" jdbcType="BIGINT" property="blogId"/>
        <result column="commentator" jdbcType="VARCHAR" property="commentator"/>
        <result column="email" jdbcType="VARCHAR" property="email"/>
        <result column="comment_body" jdbcType="VARCHAR" property="commentBody"/>
        <result column="comment_create_time" jdbcType="TIMESTAMP" property="commentCreateTime"/>
        <result column="comment_status" jdbcType="TINYINT" property="commentStatus"/>
        <result column="reply_body" jdbcType="VARCHAR" property="replyBody"/>
        <result column="reply_create_time" jdbcType="TIMESTAMP" property="replyCreateTime"/>
        <result column="is_deleted" jdbcType="TINYINT" property="isDeleted"/>
    </resultMap>

    <select id="findBlogCommentList" resultMap="BaseResultMap">
        select comment_id, comment_owner, comment_blog_id, commentator, email, comment_body, comment_create_time, comment_status, reply_body, reply_create_time, is_deleted
        from tb_blog_comment
        where is_deleted=0 and comment_owner = #{commentOwner,jdbcType=VARCHAR}
    </select>

    <select id="findBlogCommentForOneBlog" resultMap="BaseResultMap">
        select comment_id, comment_owner, comment_blog_id, commentator, email, comment_body, comment_create_time, comment_status, reply_body, reply_create_time, is_deleted
        from tb_blog_comment
        where is_deleted=0 and comment_blog_id = #{blogId,jdbcType=BIGINT} and comment_status = 1;
    </select>

    <select id="getTotalBlogComments" resultType="int">
        select count(*) from tb_blog_comment
        where is_deleted=0 and comment_owner=#{commentOwner, jdbcType=VARCHAR}
    </select>

    <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
        select comment_id, comment_blog_id, commentator, email, comment_body, comment_create_time, comment_status, reply_body, reply_create_time, is_deleted
        from tb_blog_comment
        where comment_id = #{commentId,jdbcType=BIGINT} and is_deleted=0
    </select>

    <update id="deleteByPrimaryKey" parameterType="java.lang.Long">
        update tb_blog_comment set is_deleted=1
        where comment_id = #{commentId,jdbcType=BIGINT} and is_deleted=0
    </update>

    <update id="checkDone">
        update tb_blog_comment
        set comment_status=1 where comment_id in
        <foreach item="id" collection="ids" open="(" separator="," close=")">
            #{id}
        </foreach>
        and comment_status = 0 and comment_owner = #{commentOwner, jdbcType=VARCHAR}
    </update>

    <update id="deleteBatch">
        update tb_blog_comment
        set is_deleted=1 where comment_id in
        <foreach item="id" collection="ids" open="(" separator="," close=")">
            #{id}
        </foreach>
        and comment_owner = #{commentOwner, jdbcType=VARCHAR}
    </update>

    <insert id="insert" parameterType="com.site.blog.my.core.entity.BlogComment">
        insert into tb_blog_comment (comment_id, comment_owner, comment_blog_id, commentator, email, comment_body, comment_create_time, comment_status, reply_body, reply_create_time, is_deleted)
        values (#{commentId,jdbcType=BIGINT}, #{commentOwner,jdbcType=VARCHAR}, #{blogId,jdbcType=BIGINT}, #{commentator,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR}, #{commentBody,jdbcType=VARCHAR},
                #{commentCreateTime,jdbcType=TIMESTAMP}, #{commentStatus,jdbcType=TINYINT}, #{replyBody,jdbcType=VARCHAR}, #{replyCreateTime,jdbcType=TIMESTAMP}, #{isDeleted,jdbcType=TINYINT})
    </insert>

    <insert id="insertSelective" parameterType="com.site.blog.my.core.entity.BlogComment">
        insert into tb_blog_comment
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="commentId != null">
                comment_id,
            </if>
            <if test="commentOwner != null">
                comment_owner,
            </if>
            <if test="blogId != null">
                comment_blog_id,
            </if>
            <if test="commentator != null">
                commentator,
            </if>
            <if test="email != null">
                email,
            </if>
            <if test="commentBody != null">
                comment_body,
            </if>
            <if test="commentCreateTime != null">
                comment_create_time,
            </if>
            <if test="commentStatus != null">
                comment_status,
            </if>
            <if test="replyBody != null">
                reply_body,
            </if>
            <if test="replyCreateTime != null">
                reply_create_time,
            </if>
            <if test="isDeleted != null">
                is_deleted,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="commentId != null">
                #{commentId,jdbcType=BIGINT},
            </if>
            <if test="commentOwner != null">
                #{commentOwner, jdbcType=VARCHAR},
            </if>
            <if test="blogId != null">
                #{blogId,jdbcType=BIGINT},
            </if>
            <if test="commentator != null">
                #{commentator,jdbcType=VARCHAR},
            </if>
            <if test="email != null">
                #{email,jdbcType=VARCHAR},
            </if>
            <if test="commentBody != null">
                #{commentBody,jdbcType=VARCHAR},
            </if>
            <if test="commentCreateTime != null">
                #{commentCreateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="commentStatus != null">
                #{commentStatus,jdbcType=TINYINT},
            </if>
            <if test="replyBody != null">
                #{replyBody,jdbcType=VARCHAR},
            </if>
            <if test="replyCreateTime != null">
                #{replyCreateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="isDeleted != null">
                #{isDeleted,jdbcType=TINYINT},
            </if>
        </trim>
    </insert>

    <update id="updateByPrimaryKeySelective" parameterType="com.site.blog.my.core.entity.BlogComment">
        update tb_blog_comment
        <set>
            <if test="blogId != null">
                comment_blog_id = #{blogId,jdbcType=BIGINT},
            </if>
            <if test="commentator != null">
                commentator = #{commentator,jdbcType=VARCHAR},
            </if>
            <if test="email != null">
                email = #{email,jdbcType=VARCHAR},
            </if>
            <if test="commentBody != null">
                comment_body = #{commentBody,jdbcType=VARCHAR},
            </if>
            <if test="commentCreateTime != null">
                comment_create_time = #{commentCreateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="commentStatus != null">
                comment_status = #{commentStatus,jdbcType=TINYINT},
            </if>
            <if test="replyBody != null">
                reply_body = #{replyBody,jdbcType=VARCHAR},
            </if>
            <if test="replyCreateTime != null">
                reply_create_time = #{replyCreateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="isDeleted != null">
                is_deleted = #{isDeleted,jdbcType=TINYINT},
            </if>
        </set>
        where comment_id = #{commentId,jdbcType=BIGINT}
    </update>

    <update id="updateByPrimaryKey" parameterType="com.site.blog.my.core.entity.BlogComment">
        update tb_blog_comment
        set comment_blog_id = #{blogId,jdbcType=BIGINT},
            commentator = #{commentator,jdbcType=VARCHAR},
            email = #{email,jdbcType=VARCHAR},
            comment_body = #{commentBody,jdbcType=VARCHAR},
            comment_create_time = #{commentCreateTime,jdbcType=TIMESTAMP},
            comment_status = #{commentStatus,jdbcType=TINYINT},
            reply_body = #{replyBoday,jdbcType=VARCHAR},
            reply_create_time = #{replyCreateTime,jdbcType=TIMESTAMP},
            is_deleted = #{isDeleted,jdbcType=TINYINT}
        where comment_id = #{commentId,jdbcType=BIGINT}
    </update>

</mapper>